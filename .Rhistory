reg4_c
########################
# Figure 3
########################
ggplot(aes(x = math_sd_s, y = score, group=`Party Won`, color=`Party Won`)) +
geom_point() +
geom_smooth(method="lm")
ggplot(aes(x = math_sd_s, y = score, group=`Party Won`, color=`Party Won`)) +
geom_point() +
geom_smooth(method="lm")
####################################
# Main effect RDROBUST
####################################
rm(list=ls())
# load packages
library(Hmisc)
library(ggplot2)
library(stargazer)
library(foreign)
library(rdrobust)
library(rdd)
library(readstata13)
library(sandwich)
library(readstata13)
library(rdd)
library(designmatch)
# functions
vcovCluster <- function(
model,
cluster
)
{
require(sandwich)
require(lmtest)
if(nrow(model.matrix(model))!=length(cluster)){
stop("check your data: cluster variable has different N than model")
}
M <- length(unique(cluster))
N <- length(cluster)
K <- model$rank
if(M<50){
warning("Fewer than 50 clusters, variances may be unreliable (could try block bootstrap instead).")
}
dfc <- (M/(M - 1)) * ((N - 1)/(N - K))
uj  <- apply(estfun(model), 2, function(x) tapply(x, cluster, sum));
rcse.cov <- dfc * sandwich(model, meat = crossprod(uj)/N)
return(rcse.cov)
}
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
# load data
#d = read.dta13("~/Dropbox/Penn State/Journal Submission/DLL Assessments/01_data/clean_data/clean data faces2014_5_14_2023.dta")
d = read.dta13("~/Dropbox/DLL Assessments/01_data/clean_data/clean data faces2014_5_14_2023.dta")
names(d)
# check data
table(d$screentest,d$math_spanish)
# drop missing
#d = d[!is.na(d$math_spanish),]
#table(d$math_spanish, exclude = NA)
################
# Prepare data
################
# drop missing scores
table(d$screentest, exclude = NULL)
d = d[!is.na(d$screentest),]
# score
d$score = d$screentest-8
table(d$score, exclude = NULL)
table(d$score,d$screentest)
d$score[d$score>-1] = d$score[d$score>-1] + 1
table(d$score, exclude = NULL)
table(d$score,d$screentest)
table(d$score,d$math_spanish)
# treatment
d$t_ind = 0
d$t_ind[d$score>0] = 1
table(d$t_ind, exclude = NULL)
table(d$t_ind,d$score)
table(d$t_ind,d$screentest)
# outcome
table(d$math_sd, exclude = NULL)
table(d$pict_voc, exclude = NULL)
table(d$letter_word, exclude = NULL)
table(d$spelling, exclude = NULL)
# generate bandwidth
d3 = d[d$score <= 3 & d$score >= -3,]
table(d3$score)
# check covariates
table(d$CLS1_ID, exclude = NULL)
# optimal weight
h = rdbwselect(d$math_sd,d$score)$bws[1]
h
# weights
d$kweights = kernelwts(d$score, 0, bw = h, kernel = "triangular")
sum(d$kweights!=0)
plot(d$score,d$kweights)
############################
# RDD results
############################
table(d$math_sd, exclude = NULL)
table(d$pict_voc, exclude = NULL)
table(d$letter_word, exclude = NULL)
table(d$spelling, exclude = NULL)
d$math_sd_s = (d$math_sd - mean(d$math_sd))/sd(d$math_sd)
d$pict_voc_s = (d$pict_voc - mean(d$pict_voc))/sd(d$pict_voc)
d$letter_word_s = (d$letter_word - mean(d$letter_word))/sd(d$letter_word)
d$spelling_s = (d$spelling - mean(d$spelling))/sd(d$spelling)
# math
describe(d$math_sd_s)
reg1 = lm(d$math_sd_s ~ d$t_ind + d$score + d$t_ind*d$score + as.factor(d$CLS1_ID), weights = d$kweights)
reg1_c = round(coeftest(reg1, vcov = vcovCluster(reg1, cluster = d$CLS1_ID)),4)
reg1_c
# pic
describe(d$pict_voc_s)
reg2 = lm(d$pict_voc_s ~ d$t_ind + d$score + d$t_ind*d$score + as.factor(d$CLS1_ID), weights = d$kweights)
reg2_c = round(coeftest(reg2, vcov = vcovCluster(reg2, cluster = d$CLS1_ID)),4)
reg2_c
# letter
describe(d$letter_word_s)
reg3 = lm(d$letter_word_s ~ d$t_ind + d$score + d$t_ind*d$score + as.factor(d$CLS1_ID), weights = d$kweights)
reg3_c = round(coeftest(reg3, vcov = vcovCluster(reg3, cluster = d$CLS1_ID)),4)
reg3_c
# spelling
describe(d$spelling_s)
reg4 = lm(d$spelling_s ~ d$t_ind + d$score + d$t_ind*d$score + as.factor(d$CLS1_ID), weights = d$kweights)
reg4_c = round(coeftest(reg4, vcov = vcovCluster(reg4, cluster = d$CLS1_ID)),4)
reg4_c
########################
# Figure 3
########################
ggplot(aes(x = math_sd_s, y = score, group=`Party Won`, color=`Party Won`)) +
geom_point() +
geom_smooth(method="lm") +
ylim(14, 22)
ggplot(aes(x = math_sd_s, y = score, group=t_ind, color=t_ind)) +
geom_point() +
geom_smooth(method="lm") +
ylim(14, 22)
ggplot(aes(x = d$math_sd_s, y = d$score, group=d$t_ind, color=d$t_ind)) +
geom_point() +
geom_smooth(method="lm") +
ylim(14, 22)
ggplot(aes(x = d$math_sd_s, y = d$score, group=d$t_ind, color=d$t_ind))
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10000,  subset = -3 <= d$score & d$score <= 3,
binselect="qsmv", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="qsmv", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="qsmv", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="qsmv", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="qsmv",scale = 10, kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="qsmv",scale = 10, kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="qsmv",scale = 10, kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="qsmv",scale = 1000, kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="qs", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10000,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
ggplot(d, aes(score math_sd_s, color = factor(t_ind)))
ggplot(d, aes(score, math_sd_s, color = factor(t_ind)))
ggplot(d, aes(score, math_sd_s, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm")
ggplot(d, aes(score, math_sd_s, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable")
d$math_sd_s
ggplot(d, aes(math_sd_s,score, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
ggplot(d, aes(score, math_sd_s, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
ggplot(d, aes(score, math_sd, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
d2 = d[abs(d$score) < 3,]
ggplot(d, aes(score, math_sd, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
ggplot(d2, aes(score, math_sd, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
ggplot(d2, aes(score, math_sd, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
abs(d$score)
d$score
abs(d$score)
d2 = d[abs(d$score) < 3,]
h
d2 = d[abs(d$score) < 3,]
table(d2$score)
ggplot(d2, aes(score, math_sd, color = factor(t_ind))) +
geom_point()
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10000,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
d2 = d[abs(d$score) < 3,]
table(d2$score)
ggplot(d2, aes(score, math_sd, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
ggplot(d, aes(score, math_sd, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 0,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 0,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 0,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
####################################
# Main effect RDROBUST
####################################
rm(list=ls())
# load packages
library(Hmisc)
library(ggplot2)
library(stargazer)
library(foreign)
library(rdrobust)
library(rdd)
library(readstata13)
library(sandwich)
library(readstata13)
library(rdd)
library(designmatch)
# functions
vcovCluster <- function(
model,
cluster
)
{
require(sandwich)
require(lmtest)
if(nrow(model.matrix(model))!=length(cluster)){
stop("check your data: cluster variable has different N than model")
}
M <- length(unique(cluster))
N <- length(cluster)
K <- model$rank
if(M<50){
warning("Fewer than 50 clusters, variances may be unreliable (could try block bootstrap instead).")
}
dfc <- (M/(M - 1)) * ((N - 1)/(N - K))
uj  <- apply(estfun(model), 2, function(x) tapply(x, cluster, sum));
rcse.cov <- dfc * sandwich(model, meat = crossprod(uj)/N)
return(rcse.cov)
}
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
# load data
#d = read.dta13("~/Dropbox/Penn State/Journal Submission/DLL Assessments/01_data/clean_data/clean data faces2014_5_14_2023.dta")
d = read.dta13("~/Dropbox/DLL Assessments/01_data/clean_data/clean data faces2014_5_14_2023.dta")
names(d)
# check data
table(d$screentest,d$math_spanish)
# drop missing
#d = d[!is.na(d$math_spanish),]
#table(d$math_spanish, exclude = NA)
################
# Prepare data
################
# drop missing scores
table(d$screentest, exclude = NULL)
d = d[!is.na(d$screentest),]
# score
d$score = d$screentest-8
table(d$score, exclude = NULL)
table(d$score,d$screentest)
d$score[d$score>-1] = d$score[d$score>-1] + 1
table(d$score, exclude = NULL)
table(d$score,d$screentest)
table(d$score,d$math_spanish)
# treatment
d$t_ind = 0
d$t_ind[d$score>0] = 1
table(d$t_ind, exclude = NULL)
table(d$t_ind,d$score)
table(d$t_ind,d$screentest)
# outcome
table(d$math_sd, exclude = NULL)
table(d$pict_voc, exclude = NULL)
table(d$letter_word, exclude = NULL)
table(d$spelling, exclude = NULL)
# generate bandwidth
d3 = d[d$score <= 3 & d$score >= -3,]
table(d3$score)
# check covariates
table(d$CLS1_ID, exclude = NULL)
# optimal weight
h = rdbwselect(d$math_sd,d$score)$bws[1]
h
# weights
d$kweights = kernelwts(d$score, 0, bw = h, kernel = "triangular")
sum(d$kweights!=0)
plot(d$score,d$kweights)
############################
# RDD results
############################
table(d$math_sd, exclude = NULL)
table(d$pict_voc, exclude = NULL)
table(d$letter_word, exclude = NULL)
table(d$spelling, exclude = NULL)
d$math_sd_s = (d$math_sd - mean(d$math_sd))/sd(d$math_sd)
d$pict_voc_s = (d$pict_voc - mean(d$pict_voc))/sd(d$pict_voc)
d$letter_word_s = (d$letter_word - mean(d$letter_word))/sd(d$letter_word)
d$spelling_s = (d$spelling - mean(d$spelling))/sd(d$spelling)
# math
describe(d$math_sd_s)
reg1 = lm(d$math_sd_s ~ d$t_ind + d$score + d$t_ind*d$score + as.factor(d$CLS1_ID), weights = d$kweights)
reg1_c = round(coeftest(reg1, vcov = vcovCluster(reg1, cluster = d$CLS1_ID)),4)
reg1_c
# pic
describe(d$pict_voc_s)
reg2 = lm(d$pict_voc_s ~ d$t_ind + d$score + d$t_ind*d$score + as.factor(d$CLS1_ID), weights = d$kweights)
reg2_c = round(coeftest(reg2, vcov = vcovCluster(reg2, cluster = d$CLS1_ID)),4)
reg2_c
# letter
describe(d$letter_word_s)
reg3 = lm(d$letter_word_s ~ d$t_ind + d$score + d$t_ind*d$score + as.factor(d$CLS1_ID), weights = d$kweights)
reg3_c = round(coeftest(reg3, vcov = vcovCluster(reg3, cluster = d$CLS1_ID)),4)
reg3_c
# spelling
describe(d$spelling_s)
reg4 = lm(d$spelling_s ~ d$t_ind + d$score + d$t_ind*d$score + as.factor(d$CLS1_ID), weights = d$kweights)
reg4_c = round(coeftest(reg4, vcov = vcovCluster(reg4, cluster = d$CLS1_ID)),4)
reg4_c
########################
# Figure 3
########################
d2 = d[abs(d$score) < 3,]
table(d2$score)
ggplot(d, aes(score, math_sd, color = factor(t_ind))) +
geom_point() + stat_smooth(type="lm") +
geom_vline(xintercept=0, linetype="longdash") +
xlab("Running variable") +
ylab("Outcome variable") + scale_colour_discrete()
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 0,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 0,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = d$math_sd_s, x = d$score, h= 3, nbins = 10000,  subset = -3 <= d$score & d$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
dx = rbind(d,d,d,d)
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 10000,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 10000,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 10000,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 10000,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 10000,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 100,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
dx = rbind(d,d,d,d,d,d,d,d,d,d,d,d,d)
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 100,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 100,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
rdplot(y = dx$math_sd_s, x = dx$score, h= 3, nbins = 1000,  subset = -3 <= dx$score & dx$score <= 3,
binselect="esmvpr", kernel="triangular", col.lines = "black", col.dots = "black", p=1, y.lim = c(-2, 1), title = "",
y.label = "Standardized math score", x.label = "Screening test")
set.seed(12345)
dat <- data.frame(x = runif(1000, -1, 1), cov = rnorm(1000))
dat$tr <- as.integer(dat$x >= 0)
dat$y <- 3 + 2 * dat$x + 3 * dat$cov + 10 * (dat$x >= 0) + rnorm(1000)
rd <- rd_est(y ~ x + tr | cov, data = dat, cutpoint = 0, t.design = "geq")
library(rdd)
set.seed(12345)
dat <- data.frame(x = runif(1000, -1, 1), cov = rnorm(1000))
dat$tr <- as.integer(dat$x >= 0)
dat$y <- 3 + 2 * dat$x + 3 * dat$cov + 10 * (dat$x >= 0) + rnorm(1000)
rd <- rd_est(y ~ x + tr | cov, data = dat, cutpoint = 0, t.design = "geq")
library(rdd)
set.seed(12345)
dat <- data.frame(x = runif(1000, -1, 1), cov = rnorm(1000))
install.packages("rdd")
install.packages("rdd")
set.seed(12345)
dat <- data.frame(x = runif(1000, -1, 1), cov = rnorm(1000))
dat
dat$tr <- as.integer(dat$x >= 0)
dat$y <- 3 + 2 * dat$x + 3 * dat$cov + 10 * (dat$x >= 0) + rnorm(1000)
rd_est(y ~ x + tr | cov, data = dat, cutpoint = 0, t.design = "geq")
rd <- RDestimate(y ~ x + tr | cov, data = dat, cutpoint = 0, t.design = "geq")
rd <- RDestimate(y ~ x + tr, data = dat, cutpoint = 0)
RDestimate(y ~ x + tr, data = dat, cutpoint = 0)
library(rdd)
rd <- RDestimate(y ~ x + tr, data = dat, cutpoint = 0)
library(rdd)
set.seed(12345)
dat <- data.frame(x = runif(1000, -1, 1), cov = rnorm(1000))
dat$tr <- as.integer(dat$x >= 0)
dat$y <- 3 + 2 * dat$x + 3 * dat$cov + 10 * (dat$x >= 0) + rnorm(1000)
rd <- RDestimate(y ~ x + tr, data = dat, cutpoint = 0)
plot(rd)
rd <- RDestimate(d$math_sd_s ~ d$score + d$t_ind, data = dat, cutpoint = 0)
View(dat)
y = d$math_sd
x = d$score
tr = d$t_ind
rd <- RDestimate(y ~ x + tr, data = dat, cutpoint = 0)
plot(rd)
rd <- RDestimate(y ~ x + tr, data = d, cutpoint = 0)
plot(rd)
rd <- RDestimate(y ~ x + tr, data = d, cutpoint = 0, bw = 3)
plot(rd)
d$y = d$math_sd
d$x = d$score
d$tr = d$t_ind
rd <- RDestimate(y ~ x + tr, data = d, cutpoint = 0)
plot(rd)
rd <- RDestimate(y ~ x + tr, data = d, cutpoint = 0, bw = 3)
plot(rd)
rd <- RDestimate(y ~ x + tr, data = d, cutpoint = 0, bw = 3)
plot(rd)
rd <- RDestimate(y ~ x + tr, data = d, cutpoint = 0, bw = 3)
plot(rd)
d$tr = d$t_ind
d2 = d[abs(d$score)<3,]
rd <- RDestimate(y ~ x + tr, data = d2, cutpoint = 0)
rd <- RDestimate(y ~ x + tr, data = d2, cutpoint = 0, bw = 3)
plot(rd)
d$y = d$math_sd_s
d$x = d$score
d$tr = d$t_ind
d2 = d[abs(d$score)<3,]
rd <- RDestimate(y ~ x + tr, data = d2, cutpoint = 0, bw = 3)
plot(rd)
plot(rd,type="l")
plot(rd,type="l")
plot(rd,type="2")
plot(rd,type="2")
install.packages("~/Desktop/rdd.zip", repos = NULL, type = "win.binary")
install.packages("~/Desktop/rdd.tar.gz", repos = NULL, type = "source")
d2 = d[abs(d$score)<3,]
rd <- RDestimate(y ~ x + tr, data = d2, cutpoint = 0, bw = 3)
plot(rd,type="2")
pdf(file="~/Dropbox/DLL Assessments/03_manuscript/figures/rdd_plot2.pdf",
width=7,
height=7)
plot(rd)
dev.off()
####################################
# Main effect RDROBUST
####################################
rm(list=ls())
