age_control1 = d1$age[d1$t_ind==0]
age_treated1 = d1$age[d1$t_ind==1]
age_control2 = d2$age[d2$t_ind==0]
age_treated2 = d2$age[d2$t_ind==1]
age_control3 = d3$age[d3$t_ind==0]
age_treated3 = d3$age[d3$t_ind==1]
education_control1 = d1$education[d1$t_ind==0]
education_treated1 = d1$education[d1$t_ind==1]
education_control2 = d2$education[d2$t_ind==0]
education_treated2 = d2$education[d2$t_ind==1]
education_control3 = d3$education[d3$t_ind==0]
education_treated3 = d3$education[d3$t_ind==1]
gender_control1 = d1$gender[d1$t_ind==0]
gender_treated1 = d1$gender[d1$t_ind==1]
gender_control2 = d2$gender[d2$t_ind==0]
gender_treated2 = d2$gender[d2$t_ind==1]
gender_control3 = d3$gender[d3$t_ind==0]
gender_treated3 = d3$gender[d3$t_ind==1]
register_control1 = d1$register[d1$t_ind==0]
register_treated1 = d1$register[d1$t_ind==1]
register_control2 = d2$register[d2$t_ind==0]
register_treated2 = d2$register[d2$t_ind==1]
register_control3 = d3$register[d3$t_ind==0]
register_treated3 = d3$register[d3$t_ind==1]
# Age
t.test(age_control1,age_control2)
t.test(age_control2,age_control3)
t.test(age_control1,age_control3)
t.test(age_treated1,age_treated2)
t.test(age_treated2,age_treated3)
t.test(age_treated1,age_treated3)
# Education
t.test(education_control1,education_control2)
t.test(education_control2,education_control3)
t.test(education_control1,education_control3)
t.test(education_treated1,education_treated2)
t.test(education_treated2,education_treated3)
t.test(education_treated1,education_treated3)
# gender
t.test(gender_control1,gender_control2)
t.test(gender_control2,gender_control3)
t.test(gender_control1,gender_control3)
t.test(gender_treated1,gender_treated2)
t.test(gender_treated2,gender_treated3)
t.test(gender_treated1,gender_treated3)
# register
t.test(register_control1,register_control2)
t.test(register_control2,register_control3)
t.test(register_control1,register_control3)
t.test(register_treated1,register_treated2)
t.test(register_treated2,register_treated3)
t.test(register_treated1,register_treated3)
# Unbalanced
max(age_treated1)
min(age_treated1)
a1 = mean(age_treated1)
a2 = mean(age_treated2)
a3 = mean(age_treated3)
round(a1,3)
round(a2,3)
round(a3,3)
round(t.test(age_treated3,age_treated2)$p.value,4)
round(t.test(age_treated3,age_treated1)$p.value,4)
round(t.test(age_treated2,age_treated1)$p.value,4)
max(education_control1)
min(education_control1)
e1 = mean(education_control1)
e2 = mean(education_control2)
e3 = mean(education_control3)
round(e3,3)
round(e2,3)
round(e1,3)
round(t.test(education_control3,education_control2)$p.value,4)
round(t.test(education_control3,education_control1)$p.value,4)
round(t.test(education_control2,education_control1)$p.value,4)
max(register_treated1)
min(register_treated1)
r1 = mean(register_treated1)
r2 = mean(register_treated2)
r3 = mean(register_treated3)
round(r3,3)
round(r2,3)
round(r1,3)
round(t.test(register_treated3,register_treated2)$p.value,4)
round(t.test(register_treated3,register_treated1)$p.value,4)
round(t.test(register_treated2,register_treated1)$p.value,4)
############################################
#  Balance across samples after matching
############################################
# new variables
age_control1p = d_match1$age[d_match1$t_ind==0]
age_treated1p = d_match1$age[d_match1$t_ind==1]
age_control2p = d_match2$age[d_match2$t_ind==0]
age_treated2p = d_match2$age[d_match2$t_ind==1]
age_control3p = d_match3$age[d_match3$t_ind==0]
age_treated3p = d_match3$age[d_match3$t_ind==1]
education_control1p = d_match1$education[d_match1$t_ind==0]
education_treated1p = d_match1$education[d_match1$t_ind==1]
education_control2p = d_match2$education[d_match2$t_ind==0]
education_treated2p = d_match2$education[d_match2$t_ind==1]
education_control3p = d_match3$education[d_match3$t_ind==0]
education_treated3p = d_match3$education[d_match3$t_ind==1]
gender_control1p = d_match1$gender[d_match1$t_ind==0]
gender_treated1p = d_match1$gender[d_match1$t_ind==1]
gender_control2p = d_match2$gender[d_match2$t_ind==0]
gender_treated2p = d_match2$gender[d_match2$t_ind==1]
gender_control3p = d_match3$gender[d_match3$t_ind==0]
gender_treated3p = d_match3$gender[d_match3$t_ind==1]
register_control1p = d_match1$register[d_match1$t_ind==0]
register_treated1p = d_match1$register[d_match1$t_ind==1]
register_control2p = d_match2$register[d_match2$t_ind==0]
register_treated2p = d_match2$register[d_match2$t_ind==1]
register_control3p = d_match3$register[d_match3$t_ind==0]
register_treated3p = d_match3$register[d_match3$t_ind==1]
# Age
t.test(age_control1p,age_control2p)
t.test(age_control2p,age_control3p)
t.test(age_control1p,age_control3p)
t.test(age_treated1p,age_treated2p)
t.test(age_treated2p,age_treated3p)
t.test(age_treated1p,age_treated3p)
# Education
t.test(education_control1p,education_control2p)
t.test(education_control2p,education_control3p)
t.test(education_control1p,education_control3p)
t.test(education_treated1p,education_treated2p)
t.test(education_treated2p,education_treated3p)
t.test(education_treated1p,education_treated3p)
# gender
t.test(gender_control1p,gender_control2p)
t.test(gender_control2p,gender_control3p)
t.test(gender_control1p,gender_control3p)
t.test(gender_treated1p,gender_treated2p)
t.test(gender_treated2p,gender_treated3p)
t.test(gender_treated1p,gender_treated3p)
# Unbalanced
max(age_treated1p)
min(age_treated1p)
a1p = mean(age_treated1p)
a2p = mean(age_treated2p)
a3p = mean(age_treated3p)
round(a1p,3)
round(a2p,3)
round(a3p,3)
round(t.test(age_treated3p,age_treated2p)$p.value,4)
round(t.test(age_treated3p,age_treated1p)$p.value,4)
round(t.test(age_treated2p,age_treated1p)$p.value,4)
max(education_control1p)
min(education_control1p)
e1p = mean(education_control1p)
e2p = mean(education_control2p)
e3p = mean(education_control3p)
round(e3p,3)
round(e2p,3)
round(e1p,3)
round(t.test(education_control3p,education_control2p)$p.value,4)
round(t.test(education_control3p,education_control1p)$p.value,4)
round(t.test(education_control2p,education_control1p)$p.value,4)
max(register_treated1p)
min(register_treated1p)
r1p = mean(register_treated1p)
r2p = mean(register_treated2p)
r3p = mean(register_treated3p)
round(r3p,3)
round(r2p,3)
round(r1p,3)
round(r3,3)
round(r2,3)
round(r1,3)
round(t.test(register_treated3,register_treated2)$p.value,4)
round(t.test(register_treated3,register_treated1)$p.value,4)
round(t.test(register_treated2,register_treated1)$p.value,4)
###############################
# Cardinality Matching CEP
###############################
rm(list=ls())
library("ggplot2")
library(gridExtra)
library(grid)
# Read data and prepare basic output
load("~/Dropbox/Priorities earthquake/01_data/clean data/cepfinal_2017dec27.RData")
load("~/Dropbox/Priorities earthquake/02_analysis/001_match1.Rdata")
load("~/Dropbox/Priorities earthquake/02_analysis/002_match_control2.Rdata")
load("~/Dropbox/Priorities earthquake/02_analysis/003_match_treated2.Rdata")
load("~/Dropbox/Priorities earthquake/02_analysis/004_match_control3.Rdata")
load("~/Dropbox/Priorities earthquake/02_analysis/005_match_treated3.Rdata")
d_match2 = rbind(d_match2_exposed,d_match2_control)
table(d_match2$t_ind)
d_match2_exposed = NULL
d_match2_control = NULL
d_match3 = rbind(d_match3_exposed,d_match3_control)
table(d_match3$t_ind)
d_match3_exposed = NULL
d_match3_control = NULL
d1 = d[d$cep==62,]
table(d1$cep)
table(d1$t_ind)
d1 = d1[d1$t_ind!=99,]
table(d1$t_ind)
d2 = d[d$cep==61,]
table(d2$cep)
table(d2$t_ind)
d2 = d2[d2$t_ind!=99,]
table(d2$t_ind)
d3 = d[d$cep==60,]
table(d3$cep)
table(d3$t_ind)
d3 = d3[d3$t_ind!=99,]
table(d3$t_ind)
############################################
#  Balance across samples before matching
############################################
# new variables
age_control1 = d1$age[d1$t_ind==0]
age_treated1 = d1$age[d1$t_ind==1]
age_control2 = d2$age[d2$t_ind==0]
age_treated2 = d2$age[d2$t_ind==1]
age_control3 = d3$age[d3$t_ind==0]
age_treated3 = d3$age[d3$t_ind==1]
education_control1 = d1$education[d1$t_ind==0]
education_treated1 = d1$education[d1$t_ind==1]
education_control2 = d2$education[d2$t_ind==0]
education_treated2 = d2$education[d2$t_ind==1]
education_control3 = d3$education[d3$t_ind==0]
education_treated3 = d3$education[d3$t_ind==1]
gender_control1 = d1$gender[d1$t_ind==0]
gender_treated1 = d1$gender[d1$t_ind==1]
gender_control2 = d2$gender[d2$t_ind==0]
gender_treated2 = d2$gender[d2$t_ind==1]
gender_control3 = d3$gender[d3$t_ind==0]
gender_treated3 = d3$gender[d3$t_ind==1]
register_control1 = d1$register[d1$t_ind==0]
register_treated1 = d1$register[d1$t_ind==1]
register_control2 = d2$register[d2$t_ind==0]
register_treated2 = d2$register[d2$t_ind==1]
register_control3 = d3$register[d3$t_ind==0]
register_treated3 = d3$register[d3$t_ind==1]
# Age
t.test(age_control1,age_control2)
t.test(age_control2,age_control3)
t.test(age_control1,age_control3)
t.test(age_treated1,age_treated2)
t.test(age_treated2,age_treated3)
t.test(age_treated1,age_treated3)
# Education
t.test(education_control1,education_control2)
t.test(education_control2,education_control3)
t.test(education_control1,education_control3)
t.test(education_treated1,education_treated2)
t.test(education_treated2,education_treated3)
t.test(education_treated1,education_treated3)
# gender
t.test(gender_control1,gender_control2)
t.test(gender_control2,gender_control3)
t.test(gender_control1,gender_control3)
t.test(gender_treated1,gender_treated2)
t.test(gender_treated2,gender_treated3)
t.test(gender_treated1,gender_treated3)
# register
t.test(register_control1,register_control2)
t.test(register_control2,register_control3)
t.test(register_control1,register_control3)
t.test(register_treated1,register_treated2)
t.test(register_treated2,register_treated3)
t.test(register_treated1,register_treated3)
# Unbalanced
max(age_treated1)
min(age_treated1)
a1 = mean(age_treated1)
a2 = mean(age_treated2)
a3 = mean(age_treated3)
round(a1,3)
round(a2,3)
round(a3,3)
round(t.test(age_treated3,age_treated2)$p.value,4)
round(t.test(age_treated3,age_treated1)$p.value,4)
round(t.test(age_treated2,age_treated1)$p.value,4)
max(education_control1)
min(education_control1)
e1 = mean(education_control1)
e2 = mean(education_control2)
e3 = mean(education_control3)
round(e3,3)
round(e2,3)
round(e1,3)
round(t.test(education_control3,education_control2)$p.value,4)
round(t.test(education_control3,education_control1)$p.value,4)
round(t.test(education_control2,education_control1)$p.value,4)
max(register_treated1)
min(register_treated1)
r1 = mean(register_treated1)
r2 = mean(register_treated2)
r3 = mean(register_treated3)
round(r3,3)
round(r2,3)
round(r1,3)
round(t.test(register_treated3,register_treated2)$p.value,4)
round(t.test(register_treated3,register_treated1)$p.value,4)
round(t.test(register_treated2,register_treated1)$p.value,4)
############################################
#  Balance across samples after matching
############################################
# new variables
age_control1p = d_match1$age[d_match1$t_ind==0]
age_treated1p = d_match1$age[d_match1$t_ind==1]
age_control2p = d_match2$age[d_match2$t_ind==0]
age_treated2p = d_match2$age[d_match2$t_ind==1]
age_control3p = d_match3$age[d_match3$t_ind==0]
age_treated3p = d_match3$age[d_match3$t_ind==1]
education_control1p = d_match1$education[d_match1$t_ind==0]
education_treated1p = d_match1$education[d_match1$t_ind==1]
education_control2p = d_match2$education[d_match2$t_ind==0]
education_treated2p = d_match2$education[d_match2$t_ind==1]
education_control3p = d_match3$education[d_match3$t_ind==0]
education_treated3p = d_match3$education[d_match3$t_ind==1]
gender_control1p = d_match1$gender[d_match1$t_ind==0]
gender_treated1p = d_match1$gender[d_match1$t_ind==1]
gender_control2p = d_match2$gender[d_match2$t_ind==0]
gender_treated2p = d_match2$gender[d_match2$t_ind==1]
gender_control3p = d_match3$gender[d_match3$t_ind==0]
gender_treated3p = d_match3$gender[d_match3$t_ind==1]
register_control1p = d_match1$register[d_match1$t_ind==0]
register_treated1p = d_match1$register[d_match1$t_ind==1]
register_control2p = d_match2$register[d_match2$t_ind==0]
register_treated2p = d_match2$register[d_match2$t_ind==1]
register_control3p = d_match3$register[d_match3$t_ind==0]
register_treated3p = d_match3$register[d_match3$t_ind==1]
# Age
t.test(age_control1p,age_control2p)
t.test(age_control2p,age_control3p)
t.test(age_control1p,age_control3p)
t.test(age_treated1p,age_treated2p)
t.test(age_treated2p,age_treated3p)
t.test(age_treated1p,age_treated3p)
# Education
t.test(education_control1p,education_control2p)
t.test(education_control2p,education_control3p)
t.test(education_control1p,education_control3p)
t.test(education_treated1p,education_treated2p)
t.test(education_treated2p,education_treated3p)
t.test(education_treated1p,education_treated3p)
# gender
t.test(gender_control1p,gender_control2p)
t.test(gender_control2p,gender_control3p)
t.test(gender_control1p,gender_control3p)
t.test(gender_treated1p,gender_treated2p)
t.test(gender_treated2p,gender_treated3p)
t.test(gender_treated1p,gender_treated3p)
# Unbalanced
max(age_treated1p)
min(age_treated1p)
a1p = mean(age_treated1p)
a2p = mean(age_treated2p)
a3p = mean(age_treated3p)
round(a1p,3)
round(a2p,3)
round(a3p,3)
round(t.test(age_treated3p,age_treated2p)$p.value,4)
round(t.test(age_treated3p,age_treated1p)$p.value,4)
round(t.test(age_treated2p,age_treated1p)$p.value,4)
max(education_control1p)
min(education_control1p)
e1p = mean(education_control1p)
e2p = mean(education_control2p)
e3p = mean(education_control3p)
round(e3p,3)
round(e2p,3)
round(e1p,3)
round(t.test(education_control3p,education_control2p)$p.value,4)
round(t.test(education_control3p,education_control1p)$p.value,4)
round(t.test(education_control2p,education_control1p)$p.value,4)
max(register_treated1p)
min(register_treated1p)
r1p = mean(register_treated1p)
r2p = mean(register_treated2p)
r3p = mean(register_treated3p)
round(r3p,3)
round(r2p,3)
round(r1p,3)
round(t.test(register_treated3p,register_treated2p)$p.value,4)
round(t.test(register_treated3p,register_treated1p)$p.value,4)
round(t.test(register_treated2p,register_treated1p)$p.value,4)
########################
# Prepare fine balance
########################
d1$groups = d1$t_ind
d1$groups[d1$t_ind==0]="Control"
d1$groups[d1$t_ind==1]="Treated"
table(d1$groups)
d2$groups = d2$t_ind
d2$groups[d2$t_ind==0]="Control"
d2$groups[d2$t_ind==1]="Treated"
table(d2$groups)
d3$groups = d3$t_ind
d3$groups[d3$t_ind==0]="Control"
d3$groups[d3$t_ind==1]="Treated"
table(d3$groups)
d_match1$groups = d_match1$t_ind
d_match1$groups[d_match1$t_ind==0]="Control"
d_match1$groups[d_match1$t_ind==1]="Treated"
table(d_match1$groups)
d_match2$groups = d_match2$t_ind
d_match2$groups[d_match2$t_ind==0]="Control"
d_match2$groups[d_match2$t_ind==1]="Treated"
table(d_match2$groups)
d_match3$groups = d_match3$t_ind
d_match3$groups[d_match3$t_ind==0]="Control"
d_match3$groups[d_match3$t_ind==1]="Treated"
table(d_match3$groups)
############################
# Fine balance plots
############################
# Fine balance before matching #1
f1_bm = ggplot(d1, aes(x=register, fill=groups)) + labs(x="Registration (Survey June/July 2010)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Fine balance before matching #2
f2_bm = ggplot(d2, aes(x=register, fill=groups)) + labs(x="Registration (Survey October 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Fine balance before matching #3
f3_bm = ggplot(d3, aes(x=register, fill=groups)) + labs(x="Registration (Survey August 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Merge before matching
cairo_pdf(file="~/Dropbox/Priorities earthquake/03_manuscript/figures/f1_registration_before.pdf",
width=12,
height=7)
grid.arrange(f3_bm,f2_bm,f1_bm, ncol = 2)
dev.off()
# Fine balance after matching #1
f1_am = ggplot(d_match1, aes(x=register, fill=groups)) + labs(x="Registration (Survey June/July 2010)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Fine balance after matching #2
f2_am = ggplot(d_match2, aes(x=register, fill=groups)) + labs(x="Registration (Survey October 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Fine balance after matching #3
f3_am = ggplot(d_match3, aes(x=register, fill=groups)) + labs(x="Registration (Survey August 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Merge after matching
cairo_pdf(file="~/Dropbox/Priorities earthquake/03_manuscript/figures/f2_registration_after.pdf",
width=12,
height=7)
grid.arrange(f3_am,f2_am,f1_am, ncol = 2)
dev.off()
# Fine balance before matching #1
f1_bm = ggplot(d1, aes(x=gender, fill=groups)) + labs(x="Female (Survey June/July 2010)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Fine balance before matching #2
f2_bm = ggplot(d2, aes(x=gender, fill=groups)) + labs(x="Female (Survey October 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Fine balance before matching #3
f3_bm = ggplot(d3, aes(x=gender, fill=groups)) + labs(x="Female (Survey August 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Merge before matching
cairo_pdf(file="~/Dropbox/Priorities earthquake/03_manuscript/figures/f3_female_before.pdf",
width=12,
height=7)
grid.arrange(f3_bm,f2_bm,f1_bm, ncol = 2)
dev.off()
# Fine balance after matching #1
f1_am = ggplot(d_match1, aes(x=gender, fill=groups)) + labs(x="Female (Survey June/July 2010)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Fine balance after matching #2
f2_am = ggplot(d_match2, aes(x=gender, fill=groups)) + labs(x="Female (Survey October 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Fine balance after matching #3
f3_am = ggplot(d_match3, aes(x=gender, fill=groups)) + labs(x="Female (Survey August 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(0,1)) + theme(text = element_text(size=15))
# Merge after matching
cairo_pdf(file="~/Dropbox/Priorities earthquake/03_manuscript/figures/f4_female_after.pdf",
width=12,
height=7)
grid.arrange(f3_am,f2_am,f1_am, ncol = 2)
dev.off()
# Fine balance before matching #1
f1_bm = ggplot(d1, aes(x=age, fill=groups)) + labs(x="Age (Survey June/July 2010)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Fine balance before matching #2
f2_bm = ggplot(d2, aes(x=age, fill=groups)) + labs(x="Age (Survey October 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Fine balance before matching #3
f3_bm = ggplot(d3, aes(x=age, fill=groups)) + labs(x="Age (Survey August 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Merge before matching
cairo_pdf(file="~/Dropbox/Priorities earthquake/03_manuscript/figures/f5_age_before.pdf",
width=12,
height=7)
grid.arrange(f3_bm,f2_bm,f1_bm, ncol = 2)
dev.off()
# Fine balance after matching #1
f1_am = ggplot(d_match1, aes(x=age, fill=groups)) + labs(x="Age (Survey June/July 2010)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Fine balance after matching #2
f2_am = ggplot(d_match2, aes(x=age, fill=groups)) + labs(x="Age (Survey October 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Fine balance after matching #3
f3_am = ggplot(d_match3, aes(x=age, fill=groups)) + labs(x="Age (Survey August 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Merge after matching
cairo_pdf(file="~/Dropbox/Priorities earthquake/03_manuscript/figures/f6_age_after.pdf",
width=12,
height=7)
grid.arrange(f3_am,f2_am,f1_am, ncol = 2)
dev.off()
# Fine balance before matching #1
f1_bm = ggplot(d1, aes(x=education, fill=groups)) + labs(x="Education (Survey June/July 2010)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Fine balance before matching #2
f2_bm = ggplot(d2, aes(x=education, fill=groups)) + labs(x="Education (Survey October 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Fine balance before matching #3
f3_bm = ggplot(d3, aes(x=education, fill=groups)) + labs(x="Education (Survey August 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups",values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Merge before matching
cairo_pdf(file="~/Dropbox/Priorities earthquake/03_manuscript/figures/f7_education_before.pdf",
width=12,
height=7)
grid.arrange(f3_bm,f2_bm,f1_bm, ncol = 2)
dev.off()
# Fine balance after matching #1
f1_am = ggplot(d_match1, aes(x=education, fill=groups)) + labs(x="Education (Survey June/July 2010)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Fine balance after matching #2
f2_am = ggplot(d_match2, aes(x=education, fill=groups)) + labs(x="Education (Survey October 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Fine balance after matching #3
f3_am = ggplot(d_match3, aes(x=education, fill=groups)) + labs(x="Education (Survey August 2009)", y="Count") + geom_histogram(binwidth=.5, alpha=.5, position="dodge") + theme_bw() +  scale_fill_manual(name = "Groups", values=c("black", "grey") ) + theme(legend.key = element_rect(colour = NA)) + theme(text = element_text(size=15)) + scale_y_continuous(breaks=c(0,50,100,150,200,250)) + coord_cartesian(ylim=c(0,250)) + scale_x_continuous(breaks=c(1,2,3,4,5,6)) + theme(text = element_text(size=15))
# Merge after matching
cairo_pdf(file="~/Dropbox/Priorities earthquake/03_manuscript/figures/f8_education_after.pdf",
width=12,
height=7)
grid.arrange(f3_am,f2_am,f1_am, ncol = 2)
dev.off()
###############################
# Cardinality Matching CEP
###############################
rm(list=ls())
